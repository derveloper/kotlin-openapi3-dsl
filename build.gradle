buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.10"
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'cc.vileda'
version '1.3.1'

repositories {
    mavenCentral()
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "derveloper"
            name "Tristan Leo"
            email "maven@tristan-leo.de"
        }
    }

    scm {
        url "https://github.com/derveloper/kotlin-openapi3-dsl"
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

// Create the publication with the pom configuration:
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'cc.vileda'
            artifactId 'kotlin-openapi3-dsl'
            version "$version"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Build your OpenApi3 spec in kotlin!')
                root.appendNode('name', 'kotlin-openapi3-dsl')
                root.appendNode('url', 'https://github.com/derveloper/kotlin-openapi3-dsl')
                root.children().last() + pomConfig
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "2.15.2"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.15.2"
    implementation 'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.15.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-json-org:2.15.2'
    api 'io.swagger.core.v3:swagger-core:2.2.15'
    api 'io.swagger.parser.v3:swagger-parser:2.1.16'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.9.10'
    testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.4.2'
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.7'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}
compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}